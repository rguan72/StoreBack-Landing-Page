{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["STOREBACK_URL","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","form","width","submit","Boolean","window","location","hostname","match","ReactDOM","render","classes","useState","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","valid","setValid","clicked","setClicked","submitted","setSubmitted","apiKey","setApiKey","keyCode","setKeyCode","handleClose","useEffect","Container","component","maxWidth","CssBaseline","className","Avatar","noValidate","onSubmit","event","preventDefault","data","firstname","lastname","req","Request","method","mode","cache","credentials","headers","JSON","stringify","fetch","then","res","json","admin_id","id","value","key_code","catch","err","console","log","Grid","container","item","xs","sm","TextField","autoComplete","name","required","fullWidth","label","onChange","target","autoFocus","type","Button","disabled","CircularProgress","progress","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogContent","DialogTitle","DialogContentText","rel","DialogActions","onClick","Box","mt","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f54703ff.chunk.js","sourcesContent":["const STOREBACK_URL = \"https://storeback.herokuapp.com\";\nexport { STOREBACK_URL };\n","import React, { useState, useEffect } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { STOREBACK_URL } from \"./constants\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright Â© \"}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        StoreBack\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: \"#F55\"\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [valid, setValid] = useState(false);\n  const [clicked, setClicked] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const [apiKey, setApiKey] = useState(\"\");\n  const [keyCode, setKeyCode] = useState(\"\");\n\n  function onSubmit(event) {\n    event.preventDefault();\n    setClicked(true);\n    setSubmitted(false);\n    const data = {\n      firstname: firstName,\n      lastname: lastName,\n      email: email,\n      password: password\n    };\n    let req = new Request(STOREBACK_URL + \"/api/admin\", {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify(data)\n    });\n    fetch(req)\n      .then(res => res.json())\n      .then(res => {\n        let req = new Request(STOREBACK_URL + \"/api/key/generate\", {\n          method: \"POST\",\n          mode: \"cors\",\n          cache: \"no-cache\",\n          credentials: \"same-origin\",\n          headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n          },\n          body: JSON.stringify({ admin_id: res.id })\n        });\n        fetch(req)\n          .then(res => res.json())\n          .then(res => {\n            setSubmitted(true);\n            setClicked(false);\n            setApiKey(res.value);\n            setKeyCode(res.key_code);\n          });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  useEffect(validateForm);\n\n  function handleClose() {\n    setSubmitted(false);\n  }\n\n  function validateForm() {\n    if (\n      firstName !== \"\" &&\n      lastName !== \"\" &&\n      password !== \"\" &&\n      email !== \"\"\n    ) {\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Get API Key\n        </Typography>\n        <form\n          className={classes.form}\n          noValidate\n          onSubmit={event => onSubmit(event)}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"firstName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                value={firstName}\n                onChange={event => {\n                  setFirstName(event.target.value);\n                }}\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"lastName\"\n                autoComplete=\"lname\"\n                value={lastName}\n                onChange={event => {\n                  setLastName(event.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={email}\n                onChange={event => {\n                  setEmail(event.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={event => {\n                  setPassword(event.target.value);\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            disabled={!valid || (clicked && !submitted)}\n          >\n            {clicked && !submitted ? (\n              <CircularProgress className={classes.progress} />\n            ) : (\n              \"Get API Key\"\n            )}\n          </Button>\n        </form>\n      </div>\n      <Dialog\n        open={submitted}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogContent>\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n            Your API Key is: {apiKey}\n          </DialogTitle>\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n            Your Key Code is: {keyCode}\n          </DialogTitle>\n          <DialogContentText id=\"alert-dialog-description\">\n            These will only be shown to you once, so make sure to write it down.\n            Treat your API Key like a password. Include the API Key and Key Code\n            in request headers you send to the API, as detailed here:\n            <Link\n              href=\"https://github.com/rguan72/StoreBack\"\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              {\" \"}\n              https://github.com/rguan72/StoreBack{\" \"}\n            </Link>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Acknowledge\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}